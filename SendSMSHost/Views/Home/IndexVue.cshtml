
@{
    ViewBag.Title = "IndexVue";
}

<h2>IndexVue</h2>

<article id="app" class="row">
    <modal v-on:close="showNewModal = false" v-bind:show="showNewModal" v-bind:sms="sms" v-bind:contacts="contacts"></modal>
    <header class="col-md-6">
        <h3>
            {{ message }}
            <span v-if="showNewButton"><button v-on:click="showNewModal = true" class="btn btn-warning">New</button></span>
        </h3>
        <nav>
            <ul class="list-group">
                <li v-for="s in sms"
                    v-on:click="fetchSmsDetails(s)" :class="getSmsClass(s)"
                    style="cursor:pointer">
                    <div>
                        <span class="smsContactName">{{ s.ContactFirstName + ' ' + s.ContactLastName }}</span>
                        <span class="smsContactNumber">{{ s.ContactNumber }}</span>
                    </div>
                    <div class="smsMessage">{{ getShortenedMessage(s.Message) }}</div>
                    <div class="smsTimestamp">{{ s.TimeStamp }}</div>
                </li>
            </ul>
        </nav>
    </header>
    <article v-if="currentSms" class="col-md-4">
        <h3>Details</h3>
        <div v-if="editMode" class="form-group">
            <table>
                <tr>
                    <td>Contact First Name:</td>
                    <td><input v-model="currentSms.ContactFirstName" class="form-control"></td>
                </tr>
                <tr>
                    <td>Contact Last Name:</td>
                    <td><input v-model="currentSms.ContactLastName" class="form-control"></td>
                <tr>
                    <td>Contact:</td>
                    <td>
                        <select v-model="currentSms.ContactId" class="form-control">
                            <option v-for="contact in contacts" v-bind:value="contact.Id">{{ contact.FirstName }}</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>Contact selected:</td>
                    <td><span>Selected: {{ currentSms.ContactId }}</span></td>
                </tr>
                <tr>
                    <td>Nummer:</td>
                    <td><input v-model="currentSms.ContactNumber" class="form-control"></td>
                </tr>
                <tr>
                    <td>Bericht:</td>
                    <td><input v-model="currentSms.Message" class="form-control"></td>
                </tr>
                <tr>
                    <td>Status:</td>
                    <td>{{ currentSms.StatusName}}</td>
                </tr>
            </table>
            <button v-on:click="saveEdit" class="btn btn-primary">Save</button>
        </div>
        <div v-else>
            <table>
                <tr>
                    <td>Contact:</td>
                    <td class="smsContactName">{{  currentSms.ContactFirstName + ' ' + currentSms.ContactLastName}}</td>
                </tr>
                <tr>
                    <td>Nummer:</td>
                    <td class="sms">{{ currentSms.ContactNumber}}</td>
                </tr>
                <tr>
                    <td>Bericht:</td>
                    <td>{{ currentSms.Message}}</td>
                </tr>
                <tr>
                    <td>Status:</td>
                    <td>{{ currentSms.StatusName}}</td>
                </tr>
            </table>
            <button v-on:click="toEditMode(true)" class="btn btn-primary">Edit</button>
            <button v-on:click="deleteBook()" class="btn btn-danger">Delete</button>
        </div>
    </article>
</article>

@section scripts{
    <script src="~/Scripts/vue.js"></script>

    <!-- template for the modal component -->
    <script type="text/x-template" id="modal-template-new-sms">
        <transition name="modal">
            <div class="modal-mask" v-show="show">
                <div class="modal-wrapper">
                    <div class="modal-container">

                        <div class="modal-header">
                            <slot name="header">
                                Nieuw bericht
                            </slot>
                        </div>

                        <div class="modal-body">
                            <slot name="body">
                                <div class="form-group">
                                    <table>
                                        <tr>
                                            <td>Contact:</td>
                                            <td>
                                                <select v-model="newSms.ContactId" class="form-control">
                                                    <option v-for="contact in contacts" v-bind:value="contact.Id">{{ contact.FirstName +' '+ contact.LastName }}</option>
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Bericht:</td>
                                            <td><textarea v-model="newSms.Message" class="form-control"></textarea></td>
                                        </tr>
                                    </table>

                                </div>
                            </slot>
                        </div>

                        <div class="modal-footer">
                            <slot name="footer">
                                <button class="btn btn-primary" v-on:click="$emit('close')">Cancel</button>
                                <button v-on:click="save" class="btn btn-primary">Save</button>
                            </slot>
                        </div>
                    </div>
                </div>
            </div>
        </transition>
    </script>

    <script>
        var apiURL = '/api/'

        Vue.component('modal', {
            template: '#modal-template-new-sms',
            props: ['show', 'sms', 'contacts'],
            data: function ()
            {
                return {
                    newSms: {
                        ContactFirstName: 'xxx',
                        ContactLastName: 'xxx',
                        ContactNumber: 'xxx',
                        Message: 'xxx',
                        StatusName: 'Created'
                    },
                    apiUrl: apiURL
                }
            },
            methods: {
                save: function ()
                {
                    var self = this
                    // opslaan - ajax configuratie
                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        body: JSON.stringify(self.newSms),
                        headers: ajaxHeaders
                    }

                    ajaxConfig.method = 'POST';
                    var myRequest = new Request(self.apiUrl + 'Sms/', ajaxConfig)

                    fetch(myRequest)
                        .then(res => res.json())
                        .then(function (res)
                        {
                            theContact = self.contacts.filter(contact => (contact.Id ===
                                self.newSms.ContactId))[0];
                            self.newSms.ContactFirstName = theContact.FirstName;
                            self.newSms.ContactLastName = theContact.LastName;
                            self.newSms.ContactNumber = theContact.Number;

                            console.log(res);
                            self.newSms.Id = res.Id;
                            self.sms.push(self.newSms);
                        })
                        .catch(err => console.error('Fout: ' + err));;

                    this.$emit('close');
                }
            }
        })

        var app = new Vue({
            el: '#app',
            data: {
                message: 'Loading...',
                sms: null,
                currentSms: null,
                contacts: null,
                editMode: false,
                showNewButton: false,
                showNewModal: false,
                newSms: null
            },
            created: function ()
            {
                var self = this;
                self.loadData();
                //self.interval = setInterval(function ()
                //{
                //    self.loadData();
                //}.bind(self), 5000);
            },
            methods: {
                loadData: function ()
                {
                    this.fetchSms();
                    this.fetchContacts();
                    //if (this.currentSms !== null)
                    //{
                    //    this.fetchSmsDetails(this.currentSms)
                    //}
                    //else
                    //{

                    //};
                },
                fetchSms: function ()
                {
                    self = this;
                    fetch(`${apiURL}Sms`)
                        .then(res => res.json())
                        .then(function (sms)
                        {
                            sms.forEach(function (s, i)
                            {
                                s.isActive = false;
                            });

                            self.sms = sms;
                            self.message = 'Berichten';
                            self.showNewButton = true;
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                fetchSmsDetails: function (s)
                {
                    self = this;
                    fetch(`${apiURL}Sms/${s.Id}`)
                        .then(res => res.json())
                        .then(function (res)
                        {
                            self.currentSms = res;
                            self.sms.forEach(function (s2, i)
                            {
                                s2.isActive = false;
                            })
                            s.isActive = true;
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                getSmsClass: function (s)
                {
                    if (s.isActive) return 'list-group-item active';
                    return 'list-group-item';
                },
                fetchContacts: function ()
                {
                    self = this;
                    fetch(`${apiURL}Contacts`)
                        .then(res => res.json())
                        .then(function (res)
                        {
                            self.contacts = res;
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                toEditMode: function (isEdit)
                {
                    self = this;
                    this.editMode = true;
                },
                saveEdit: function ()
                {
                    var self = this
                    // opslaan - ajax configuratie
                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        body: JSON.stringify(self.currentSms),
                        headers: ajaxHeaders
                    }

                    ajaxConfig.method = 'PUT';
                    var myRequest = new Request(`${apiURL}Sms/${self.currentSms.Id}`, ajaxConfig)


                    fetch(myRequest)
                        .then(res => res.json())
                        .then(function (res)
                        {
                            theContact = self.contacts.filter(contact => (contact.Id ===
                                self.currentSms.ContactId))[0];
                            self.currentSms.ContactFirstName = theContact.FirstName;
                            self.currentSms.ContactLastName = theContact.LastName;

                            theSms = self.sms.filter(s => (s.Id ===
                                self.currentSms.Id))[0];
                            // gegevens aanpassen in GUI
                            theSms.Message = self.currentSms.Message;
                            theSms.ContactFirstName = theContact.FirstName;
                            theSms.ContactLastName = theContact.LastName;
                            theSms.ContactNumber = theContact.Number;

                            self.editMode = false;
                        })
                        .catch(err => console.error('Fout: ' + err));;
                },
                deleteBook: function ()
                {
                    self = this;
                    fetch(`${apiURL}Sms/${self.currentSms.Id}`, { method: 'DELETE' })
                        .then(function ()
                        {
                            self.sms.forEach(function (s, i)
                            {
                                if (s.Id == self.currentSms.Id)
                                {
                                    self.sms.splice(i, 1);
                                    return;
                                }
                                if (self.sms.length > 0)
                                    self.fetchSmsDetails(self.sms[0]);
                            });
                        })
                        .catch(err => console.error('Fout: ' + err));
                },
                getShortenedMessage: function (text)
                {
                    var desiredLength = 20;
                    if (text.length <= desiredLength)
                    {
                        return text;
                    }
                    else
                    {
                        return text.substring(0, desiredLength) + '...'
                    }

                }
            }
        });
    </script>
}